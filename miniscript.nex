
/\n+/ {
  util.LogToken("NEWLINE\n")
  util.LogTrace("Lexed newline")
  return NEWLINE
}

/<script type=\"text\/JavaScript\">/ {
  util.LogToken("SCRIPT_TAG_START ")
  util.LogTrace("Lexed start script tag")
  return SCRIPT_TAG_START
}

/<\/script>/ {
  util.LogToken("SCRIPT_TAG_END ")
  util.LogTrace("Lexed end script tag")
  return SCRIPT_TAG_END
}

/document\.write/ {
  util.LogToken("DOCUMENT_WRITE ")
  util.LogTrace("Lexed document write function call")
  return DOCUMENT_WRITE
}

/var[ \t]/ {
  util.LogToken("VARDEF ")
  util.LogTrace("Lexed var keyword")
  return VARDEF
}

/[ \t]+/ {
  util.LogToken("")
}

/[0-9]+/ {
  util.LogToken("INTEGER ")
  util.LogTokenData("(" + yylex.Text() + ") ")
  util.LogTrace("Lexed integer " + yylex.Text())
  return INTEGER
}

/[A-Za-z][A-Za-z0-9\.]*/ {
  util.LogToken("IDEN ")
  util.LogTokenData("(" + yylex.Text() + ") ")
  util.LogTrace("Lexed identifier " + yylex.Text())
  return IDENTIFIER
}

/\"(\\.|[^\\"\n])*\"/ {
  util.LogToken("STRING ")
  util.LogTokenData("(" + yylex.Text() + ") ")
  util.LogTrace("Lexed string " + yylex.Text())
  return STRING
}

/=/ {
  util.LogToken("EQUAL ")
  util.LogTrace("Lexed equal sign")
  return EQUAL
}

/{/ {
  util.LogToken("LBRACE ")
  util.LogTrace("Lexed left brace")
  return LBRACE
}

/}/ {
  util.LogToken("RBRACE ")
  util.LogTrace("Lexed right brace")
  return RBRACE
}

/\(/ {
  util.LogToken("LPAREN ")
  util.LogTrace("Lexed left paren")
  return LPAREN
}

/\)/ {
  util.LogToken("RPAREN ")
  util.LogTrace("Lexed right paren")
  return RPAREN
}

/,/ {
  util.LogToken("COMMA ")
  util.LogTrace("Lexed comma")
  return COMMA
}

/\+/ {
  util.LogToken("PLUS ")
  util.LogTrace("Lexed plus")
  return PLUS
}

/-/ {
  util.LogToken("MINUS ")
  util.LogTrace("Lexed minus")
  return MINUS
}

/\*/ {
  util.LogToken("MULT ")
  util.LogTrace("Lexed mult")
  return MULT
}

/\// {
  util.LogToken("DIVIDE ")
  util.LogTrace("Lexed divide")
  return DIVIDE
}

/:/ {
  util.LogToken("COLON ")
  util.LogTrace("Lexed colon")
  return COLON
}

/;/ {
  util.LogToken("SEMICOLON ")
  util.LogTrace("Lexed semicolon")
  return SEMICOLON
}

/./ {
  return int(yylex.Text()[0])
}

//

package main

import (
  "fmt"
  "os"
  "mhoc.co/msp/util"
)
